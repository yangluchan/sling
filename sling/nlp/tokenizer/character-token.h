
#ifndef SLING_NLP_TOKENIZER_TOKEN_H__
#define SLING_NLP_TOKENIZER_TOKEN_H__


#include <functional>
#include <string>
#include <unordered_map>
#include <vector>

#include "sling/base/types.h"

namespace sling {
namespace nlp {


// Flags for tokens.
enum TokenFlagValues {
  // The four lowest bits are reserved for a numerical parameter.
  TOKEN_PARAM_MASK = (1 << 4) - 1,

  // Token level flags.
  TOKEN_LINE     = (1 << 4),   // End-of-line token.
  TOKEN_EOS      = (1 << 5),   // End-of-sentence token.
  TOKEN_PARA     = (1 << 6),   // End-of-paragraph token.
  TOKEN_DISCARD  = (1 << 7),   // Discardable token (like whitespace).
  TOKEN_CONDEOS  = (1 << 8),   // Conditional end-of-sentence token.
  TOKEN_QUOTE    = (1 << 9),   // Quote token.
  TOKEN_OPEN     = (1 << 10),  // Opening bracket token.
  TOKEN_CLOSE    = (1 << 11),  // Closing bracket token.
  TOKEN_URL      = (1 << 12),  // URL-like token.
  TOKEN_TAG      = (1 << 13),  // Tag-like token.
  TOKEN_WORD     = (1 << 14),  // Word-like token.
  TOKEN_SPLIT    = (1 << 15),  // Split token.
  TOKEN_PREFIX   = (1 << 16),  // Prefix exception.
  TOKEN_SUFFIX   = (1 << 17),  // Suffix exception.

  // Character level flags.
  TOKEN_START    = (1 << 18),  // Start of token marker.
  CHAR_LETTER    = (1 << 19),  // Letter character.
  CHAR_DIGIT     = (1 << 20),  // Digit character.
  CHAR_UPPER     = (1 << 21),  // Uppercase letter.
  CHAR_SPACE     = (1 << 22),  // Whitespace character.
  CHAR_PUNCT     = (1 << 23),  // Punctuation character.
  CHAR_HYPHEN    = (1 << 24),  // Hyphen dash character.
  NUMBER_START   = (1 << 25),  // Character valid as first character in number.
  NUMBER_PUNCT   = (1 << 26),  // Character allowed inside number.
  WORD_PUNCT     = (1 << 27),  // Character allowed inside word.
  TAG_START      = (1 << 28),  // Tag start character.
  TAG_END        = (1 << 29),  // Tag end character.
  HASHTAG_START  = (1 << 30),  // Character indicating start of hash-tag.
  CHAR_CHINESE   = (1 << 31),  // Chinese character
};

typedef int32 TokenFlags;

// Token break types.
enum BreakType {
  NO_BREAK         = 0,
  SPACE_BREAK      = 1,
  LINE_BREAK       = 2,
  SENTENCE_BREAK   = 3,
  PARAGRAPH_BREAK  = 4,
  SECTION_BREAK    = 5,
  CHAPTER_BREAK    = 6,
};

// Tokens generated by tokenizer.
struct CharacterToken{
    string text;
    BreakType brk;
    int begin;
    int end;
};

// Callback for collecting the generated character tokens.
typedef std::function<void(const CharacterToken &token)> Callback;

} // nlp
} // sling



#endif /* SLING_NLP_TOKENIZER_TOKEN_FLAGS_H__ */